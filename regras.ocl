-- Todo usuário deve possuir um perfil
context Usuario inv devePossuirPerfil:
  Perfil.allInstances()->exists(p: Perfil | self.perfil = p)

-- uma avaliação deve possuir de 1 a 5 estrelas
context AvaliacaoReceita inv devePossuirEstrelas:
  self.estrelas >= 1 && AvaliacaoReceita.estrelas <= 5

-- lógica para obter o valor dos carboidratos totais de uma receita
context Receita::getCarboidratos() : Real
post: result = self.ingredientes->collect(carboidratos)->sum()

-- toda receita deve possuir mais de 1 ingrediente
context Receita inv qtdMinimaIgredientes:
  self.ingredientes->size() > 1

-- o usuario deve possuir mais de 18 anos
context Usuario inv idadeMinima:
  self.perfil.idade >= 18

-- Um usuário deve ser criado com um conjunto vazio de receitas consumidas
context Usuario::HistoricoReceitas::receitas
  init: Set{}

-- lógica para obter o consumo médio de proteinas
context HistoricoReceitas::getConsumoMedioProteinas() : Real
post: result = self.receitas->collect(receita.proteinas)->sum() / self.receitas->size()

-- a receita sugerida deve possuir a preferência alimentar do igual ao do usuario
context Usuario::getReceitaSugerida() : Bag(Receita)
post: result->forAll(receita | self.perfil.preferenciaAlimentar = receita.preferenciaAlimentar)

-- lógica para obter a avaliação media do historico
context HistoricoReceitas::getAvaliacaoMedia() : Real
post: result = self.receitas.avaliacao->collect(estrelas)->sum() / self.avaliacoes->size()

-- lógica para obter as receitas preferidas
context HistoricoReceitas::getReceitasPreferidas() : Bag(Receita)
post: result = self.receitas->select(r: ReceitaConsumida | r.avaliacao.estrelas > self.getAvaliacaoMedia())

